"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const db = new AWS.DynamoDB.DocumentClient();
const TABLE_NAME = process.env.TABLE_NAME || "";
const PRIMARY_KEY = process.env.PRIMARY_KEY || "";
const handler = async (event = {}) => {
    if (!event.body) {
        return { statusCode: 400, body: "Bad Request: missing body" };
    }
    const editedItemId = event.pathParameters.id;
    if (!editedItemId) {
        return { statusCode: 400, body: "Bad Request: missing the path parameter id" };
    }
    const editedItem = typeof event.body == "object" ? event.body : JSON.parse(event.body);
    const editedItemProperties = Object.keys(editedItem);
    if (!editedItem || editedItemProperties.length < 1) {
        return { statusCode: 400, body: "Bad Request: empty body" };
    }
    const firstProperty = editedItemProperties.splice(0, 1);
    const params = {
        TableName: TABLE_NAME,
        Key: {
            [PRIMARY_KEY]: editedItemId,
        },
        UpdateExpression: `set ${firstProperty} = :${firstProperty}`,
        ExpressionAttributeValues: {},
        ReturnValues: "UPDATED_NEW",
    };
    params.ExpressionAttributeValues[`:${firstProperty}`] = editedItem[`${firstProperty}`];
    editedItemProperties.forEach((property) => {
        params.UpdateExpression += `, ${property} = :${property}`;
        params.ExpressionAttributeValues[`:${property}`] = editedItem[property];
    });
    try {
        await db.update(params).promise();
        return { statusCode: 200, body: "" };
    }
    catch (dbError) {
        return { statusCode: 500, body: JSON.stringify(dbError) };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1cGRhdGUtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFL0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQzdDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztBQUNoRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7QUFFM0MsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFnQixFQUFFO0lBQzdELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQ2YsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLDJCQUEyQixFQUFFLENBQUM7S0FDL0Q7SUFFRCxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztJQUM3QyxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSw0Q0FBNEMsRUFBRSxDQUFDO0tBQ2hGO0lBRUQsTUFBTSxVQUFVLEdBQVEsT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUYsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELElBQUksQ0FBQyxVQUFVLElBQUksb0JBQW9CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUseUJBQXlCLEVBQUUsQ0FBQztLQUM3RDtJQUVELE1BQU0sYUFBYSxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEQsTUFBTSxNQUFNLEdBQVE7UUFDbEIsU0FBUyxFQUFFLFVBQVU7UUFDckIsR0FBRyxFQUFFO1lBQ0gsQ0FBQyxXQUFXLENBQUMsRUFBRSxZQUFZO1NBQzVCO1FBQ0QsZ0JBQWdCLEVBQUUsT0FBTyxhQUFhLE9BQU8sYUFBYSxFQUFFO1FBQzVELHlCQUF5QixFQUFFLEVBQUU7UUFDN0IsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUNGLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLGFBQWEsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUV2RixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUN4QyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxRQUFRLE9BQU8sUUFBUSxFQUFFLENBQUM7UUFDMUQsTUFBTSxDQUFDLHlCQUF5QixDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJO1FBQ0YsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUN0QztJQUFDLE9BQU8sT0FBTyxFQUFFO1FBQ2hCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDM0Q7QUFDSCxDQUFDLENBQUM7QUF2Q1csUUFBQSxPQUFPLFdBdUNsQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuXG5jb25zdCBkYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbmNvbnN0IFRBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8IFwiXCI7XG5jb25zdCBQUklNQVJZX0tFWSA9IHByb2Nlc3MuZW52LlBSSU1BUllfS0VZIHx8IFwiXCI7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG4gIGlmICghZXZlbnQuYm9keSkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogXCJCYWQgUmVxdWVzdDogbWlzc2luZyBib2R5XCIgfTtcbiAgfVxuXG4gIGNvbnN0IGVkaXRlZEl0ZW1JZCA9IGV2ZW50LnBhdGhQYXJhbWV0ZXJzLmlkO1xuICBpZiAoIWVkaXRlZEl0ZW1JZCkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogXCJCYWQgUmVxdWVzdDogbWlzc2luZyB0aGUgcGF0aCBwYXJhbWV0ZXIgaWRcIiB9O1xuICB9XG5cbiAgY29uc3QgZWRpdGVkSXRlbTogYW55ID0gdHlwZW9mIGV2ZW50LmJvZHkgPT0gXCJvYmplY3RcIiA/IGV2ZW50LmJvZHkgOiBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuICBjb25zdCBlZGl0ZWRJdGVtUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKGVkaXRlZEl0ZW0pO1xuICBpZiAoIWVkaXRlZEl0ZW0gfHwgZWRpdGVkSXRlbVByb3BlcnRpZXMubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDQwMCwgYm9keTogXCJCYWQgUmVxdWVzdDogZW1wdHkgYm9keVwiIH07XG4gIH1cblxuICBjb25zdCBmaXJzdFByb3BlcnR5ID0gZWRpdGVkSXRlbVByb3BlcnRpZXMuc3BsaWNlKDAsIDEpO1xuICBjb25zdCBwYXJhbXM6IGFueSA9IHtcbiAgICBUYWJsZU5hbWU6IFRBQkxFX05BTUUsXG4gICAgS2V5OiB7XG4gICAgICBbUFJJTUFSWV9LRVldOiBlZGl0ZWRJdGVtSWQsXG4gICAgfSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiBgc2V0ICR7Zmlyc3RQcm9wZXJ0eX0gPSA6JHtmaXJzdFByb3BlcnR5fWAsXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gIH07XG4gIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzW2A6JHtmaXJzdFByb3BlcnR5fWBdID0gZWRpdGVkSXRlbVtgJHtmaXJzdFByb3BlcnR5fWBdO1xuXG4gIGVkaXRlZEl0ZW1Qcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgcGFyYW1zLlVwZGF0ZUV4cHJlc3Npb24gKz0gYCwgJHtwcm9wZXJ0eX0gPSA6JHtwcm9wZXJ0eX1gO1xuICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzW2A6JHtwcm9wZXJ0eX1gXSA9IGVkaXRlZEl0ZW1bcHJvcGVydHldO1xuICB9KTtcblxuICB0cnkge1xuICAgIGF3YWl0IGRiLnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAsIGJvZHk6IFwiXCIgfTtcbiAgfSBjYXRjaCAoZGJFcnJvcikge1xuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoZGJFcnJvcikgfTtcbiAgfVxufTtcbiJdfQ==